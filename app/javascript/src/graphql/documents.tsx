import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
};

/** Autogenerated input type of AdminBlockArticleMutation */
export type AdminBlockArticleMutationInput = {
  uuid: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AdminBlockArticleMutation */
export type AdminBlockArticleMutationPayload = {
  __typename?: 'AdminBlockArticleMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Autogenerated input type of AdminDeleteCommentMutation */
export type AdminDeleteCommentMutationInput = {
  id: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AdminDeleteCommentMutation */
export type AdminDeleteCommentMutationPayload = {
  __typename?: 'AdminDeleteCommentMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Autogenerated input type of AdminLoginMutation */
export type AdminLoginMutationInput = {
  name: Scalars['String'];
  password: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AdminLoginMutation */
export type AdminLoginMutationPayload = {
  __typename?: 'AdminLoginMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Autogenerated input type of AdminRecoverCommentMutation */
export type AdminRecoverCommentMutationInput = {
  id: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AdminRecoverCommentMutation */
export type AdminRecoverCommentMutationPayload = {
  __typename?: 'AdminRecoverCommentMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Autogenerated input type of AdminUnblockArticleMutation */
export type AdminUnblockArticleMutationInput = {
  uuid: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AdminUnblockArticleMutation */
export type AdminUnblockArticleMutationPayload = {
  __typename?: 'AdminUnblockArticleMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

export type Article = {
  __typename?: 'Article';
  assetId: Scalars['String'];
  author: User;
  authorized?: Maybe<Scalars['Boolean']>;
  comments: CommentConnection;
  commentsCount: Scalars['Int'];
  content?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['Int'];
  intro: Scalars['String'];
  myShare?: Maybe<Scalars['Float']>;
  ordersCount: Scalars['Int'];
  price: Scalars['Float'];
  readers: UserConnection;
  revenue: Scalars['Float'];
  state?: Maybe<Scalars['String']>;
  title: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  uuid: Scalars['ID'];
};


export type ArticleCommentsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ArticleReadersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The connection type for Article. */
export type ArticleConnection = {
  __typename?: 'ArticleConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ArticleEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Article>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Total # of objects returned from this Plural Query */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type ArticleEdge = {
  __typename?: 'ArticleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Article>;
};

export type Comment = {
  __typename?: 'Comment';
  author?: Maybe<User>;
  commentable: Article;
  content?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  deletedAt?: Maybe<Scalars['ISO8601DateTime']>;
  id: Scalars['Int'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** The connection type for Comment. */
export type CommentConnection = {
  __typename?: 'CommentConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CommentEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Comment>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Total # of objects returned from this Plural Query */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type CommentEdge = {
  __typename?: 'CommentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Comment>;
};

/** Autogenerated input type of CreateArticleMutation */
export type CreateArticleMutationInput = {
  title: Scalars['String'];
  intro: Scalars['String'];
  content: Scalars['String'];
  price: Scalars['Float'];
  state: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateArticleMutation */
export type CreateArticleMutationPayload = {
  __typename?: 'CreateArticleMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Autogenerated input type of CreateCommentMutation */
export type CreateCommentMutationInput = {
  commentableId: Scalars['Int'];
  commentableType: Scalars['String'];
  content: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateCommentMutation */
export type CreateCommentMutationPayload = {
  __typename?: 'CreateCommentMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Autogenerated input type of HideArticleMutation */
export type HideArticleMutationInput = {
  uuid: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of HideArticleMutation */
export type HideArticleMutationPayload = {
  __typename?: 'HideArticleMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};


export type Mutation = {
  __typename?: 'Mutation';
  adminBlockArticle?: Maybe<AdminBlockArticleMutationPayload>;
  adminDeleteComment?: Maybe<AdminDeleteCommentMutationPayload>;
  adminLogin?: Maybe<AdminLoginMutationPayload>;
  adminRecoverComment?: Maybe<AdminRecoverCommentMutationPayload>;
  adminUnblockArticle?: Maybe<AdminUnblockArticleMutationPayload>;
  createArticle?: Maybe<CreateArticleMutationPayload>;
  createComment?: Maybe<CreateCommentMutationPayload>;
  createdAt: Scalars['ISO8601DateTime'];
  hideArticle?: Maybe<HideArticleMutationPayload>;
  publishArticle?: Maybe<PublishArticleMutationPayload>;
  updateArticle?: Maybe<UpdateArticleMutationPayload>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};


export type MutationAdminBlockArticleArgs = {
  input: AdminBlockArticleMutationInput;
};


export type MutationAdminDeleteCommentArgs = {
  input: AdminDeleteCommentMutationInput;
};


export type MutationAdminLoginArgs = {
  input: AdminLoginMutationInput;
};


export type MutationAdminRecoverCommentArgs = {
  input: AdminRecoverCommentMutationInput;
};


export type MutationAdminUnblockArticleArgs = {
  input: AdminUnblockArticleMutationInput;
};


export type MutationCreateArticleArgs = {
  input: CreateArticleMutationInput;
};


export type MutationCreateCommentArgs = {
  input: CreateCommentMutationInput;
};


export type MutationHideArticleArgs = {
  input: HideArticleMutationInput;
};


export type MutationPublishArticleArgs = {
  input: PublishArticleMutationInput;
};


export type MutationUpdateArticleArgs = {
  input: UpdateArticleMutationInput;
};

export type Order = {
  __typename?: 'Order';
  buyer: User;
  createdAt: Scalars['ISO8601DateTime'];
  item: Article;
  orderType: Scalars['String'];
  seller: User;
  state: Scalars['String'];
  total: Scalars['Float'];
  traceId: Scalars['ID'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

export type Payment = {
  __typename?: 'Payment';
  amount: Scalars['Float'];
  assetId: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  memo?: Maybe<Scalars['String']>;
  order?: Maybe<Order>;
  payer: User;
  snapshotId: Scalars['String'];
  state: Scalars['String'];
  traceId: Scalars['ID'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** The connection type for Payment. */
export type PaymentConnection = {
  __typename?: 'PaymentConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PaymentEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Payment>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Total # of objects returned from this Plural Query */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type PaymentEdge = {
  __typename?: 'PaymentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Payment>;
};

/** Autogenerated input type of PublishArticleMutation */
export type PublishArticleMutationInput = {
  uuid: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of PublishArticleMutation */
export type PublishArticleMutationPayload = {
  __typename?: 'PublishArticleMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

export type Query = {
  __typename?: 'Query';
  adminArticleConnection: ArticleConnection;
  adminCommentConnection: CommentConnection;
  adminPaymentConnection: PaymentConnection;
  adminTransferConnection: TransferConnection;
  adminUserConnection: UserConnection;
  article?: Maybe<Article>;
  articleConnection: ArticleConnection;
  commentConnection: CommentConnection;
  createdAt: Scalars['ISO8601DateTime'];
  myArticleConnection: ArticleConnection;
  myPaymentConnection: PaymentConnection;
  myTransferConnection: TransferConnection;
  statistics: Statistics;
  transferConnection: TransferConnection;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};


export type QueryAdminArticleConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminCommentConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminPaymentConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminTransferConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminUserConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryArticleArgs = {
  uuid: Scalars['ID'];
};


export type QueryArticleConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  order: Scalars['String'];
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryCommentConnectionArgs = {
  commentableType?: Maybe<Scalars['String']>;
  commentableId?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryMyArticleConnectionArgs = {
  type: Scalars['String'];
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryMyPaymentConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryMyTransferConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTransferConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export type Statistics = {
  __typename?: 'Statistics';
  articlesCount: Scalars['Int'];
  authorRevenueAmount: Scalars['Float'];
  createdAt: Scalars['ISO8601DateTime'];
  readerRevenueAmount: Scalars['Float'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  usersCount: Scalars['Int'];
};

export type Transfer = {
  __typename?: 'Transfer';
  amount: Scalars['Float'];
  assetId: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  memo?: Maybe<Scalars['String']>;
  processedAt?: Maybe<Scalars['ISO8601DateTime']>;
  recipient: User;
  snapshotId?: Maybe<Scalars['String']>;
  traceId: Scalars['ID'];
  transferType: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** The connection type for Transfer. */
export type TransferConnection = {
  __typename?: 'TransferConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TransferEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Transfer>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Total # of objects returned from this Plural Query */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type TransferEdge = {
  __typename?: 'TransferEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Transfer>;
};

/** Autogenerated input type of UpdateArticleMutation */
export type UpdateArticleMutationInput = {
  uuid: Scalars['ID'];
  title?: Maybe<Scalars['String']>;
  intro?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateArticleMutation */
export type UpdateArticleMutationPayload = {
  __typename?: 'UpdateArticleMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  error?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

export type User = {
  __typename?: 'User';
  articleConnction: ArticleConnection;
  articlesCount: Scalars['Int'];
  authorRevenueAmount: Scalars['Float'];
  avatarUrl: Scalars['String'];
  commentConnction: CommentConnection;
  commentsCount: Scalars['Int'];
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['Int'];
  mixinId: Scalars['String'];
  mixinUuid: Scalars['String'];
  name: Scalars['String'];
  paymentsTotal: Scalars['Float'];
  readerRevenueAmount: Scalars['Float'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};


export type UserArticleConnctionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserCommentConnctionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The connection type for User. */
export type UserConnection = {
  __typename?: 'UserConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<User>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Total # of objects returned from this Plural Query */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<User>;
};


export const AdminBlockArticleDocument = gql`
    mutation AdminBlockArticle($input: AdminBlockArticleMutationInput!) {
  adminBlockArticle(input: $input) {
    error
    success
  }
}
    `;
export type AdminBlockArticleMutationFn = Apollo.MutationFunction<AdminBlockArticleMutation, AdminBlockArticleMutationVariables>;

/**
 * __useAdminBlockArticleMutation__
 *
 * To run a mutation, you first call `useAdminBlockArticleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminBlockArticleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminBlockArticleMutation, { data, loading, error }] = useAdminBlockArticleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminBlockArticleMutation(baseOptions?: Apollo.MutationHookOptions<AdminBlockArticleMutation, AdminBlockArticleMutationVariables>) {
        return Apollo.useMutation<AdminBlockArticleMutation, AdminBlockArticleMutationVariables>(AdminBlockArticleDocument, baseOptions);
      }
export type AdminBlockArticleMutationHookResult = ReturnType<typeof useAdminBlockArticleMutation>;
export type AdminBlockArticleMutationResult = Apollo.MutationResult<AdminBlockArticleMutation>;
export type AdminBlockArticleMutationOptions = Apollo.BaseMutationOptions<AdminBlockArticleMutation, AdminBlockArticleMutationVariables>;
export const AdminDeleteCommentDocument = gql`
    mutation AdminDeleteComment($input: AdminDeleteCommentMutationInput!) {
  adminDeleteComment(input: $input) {
    error
    success
  }
}
    `;
export type AdminDeleteCommentMutationFn = Apollo.MutationFunction<AdminDeleteCommentMutation, AdminDeleteCommentMutationVariables>;

/**
 * __useAdminDeleteCommentMutation__
 *
 * To run a mutation, you first call `useAdminDeleteCommentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminDeleteCommentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminDeleteCommentMutation, { data, loading, error }] = useAdminDeleteCommentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminDeleteCommentMutation(baseOptions?: Apollo.MutationHookOptions<AdminDeleteCommentMutation, AdminDeleteCommentMutationVariables>) {
        return Apollo.useMutation<AdminDeleteCommentMutation, AdminDeleteCommentMutationVariables>(AdminDeleteCommentDocument, baseOptions);
      }
export type AdminDeleteCommentMutationHookResult = ReturnType<typeof useAdminDeleteCommentMutation>;
export type AdminDeleteCommentMutationResult = Apollo.MutationResult<AdminDeleteCommentMutation>;
export type AdminDeleteCommentMutationOptions = Apollo.BaseMutationOptions<AdminDeleteCommentMutation, AdminDeleteCommentMutationVariables>;
export const AdminLoginDocument = gql`
    mutation AdminLogin($input: AdminLoginMutationInput!) {
  adminLogin(input: $input) {
    error
    success
  }
}
    `;
export type AdminLoginMutationFn = Apollo.MutationFunction<AdminLoginMutation, AdminLoginMutationVariables>;

/**
 * __useAdminLoginMutation__
 *
 * To run a mutation, you first call `useAdminLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminLoginMutation, { data, loading, error }] = useAdminLoginMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminLoginMutation(baseOptions?: Apollo.MutationHookOptions<AdminLoginMutation, AdminLoginMutationVariables>) {
        return Apollo.useMutation<AdminLoginMutation, AdminLoginMutationVariables>(AdminLoginDocument, baseOptions);
      }
export type AdminLoginMutationHookResult = ReturnType<typeof useAdminLoginMutation>;
export type AdminLoginMutationResult = Apollo.MutationResult<AdminLoginMutation>;
export type AdminLoginMutationOptions = Apollo.BaseMutationOptions<AdminLoginMutation, AdminLoginMutationVariables>;
export const AdminRecoverCommentDocument = gql`
    mutation AdminRecoverComment($input: AdminRecoverCommentMutationInput!) {
  adminRecoverComment(input: $input) {
    error
    success
  }
}
    `;
export type AdminRecoverCommentMutationFn = Apollo.MutationFunction<AdminRecoverCommentMutation, AdminRecoverCommentMutationVariables>;

/**
 * __useAdminRecoverCommentMutation__
 *
 * To run a mutation, you first call `useAdminRecoverCommentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminRecoverCommentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminRecoverCommentMutation, { data, loading, error }] = useAdminRecoverCommentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminRecoverCommentMutation(baseOptions?: Apollo.MutationHookOptions<AdminRecoverCommentMutation, AdminRecoverCommentMutationVariables>) {
        return Apollo.useMutation<AdminRecoverCommentMutation, AdminRecoverCommentMutationVariables>(AdminRecoverCommentDocument, baseOptions);
      }
export type AdminRecoverCommentMutationHookResult = ReturnType<typeof useAdminRecoverCommentMutation>;
export type AdminRecoverCommentMutationResult = Apollo.MutationResult<AdminRecoverCommentMutation>;
export type AdminRecoverCommentMutationOptions = Apollo.BaseMutationOptions<AdminRecoverCommentMutation, AdminRecoverCommentMutationVariables>;
export const AdminUnblockArticleDocument = gql`
    mutation AdminUnblockArticle($input: AdminUnblockArticleMutationInput!) {
  adminUnblockArticle(input: $input) {
    error
    success
  }
}
    `;
export type AdminUnblockArticleMutationFn = Apollo.MutationFunction<AdminUnblockArticleMutation, AdminUnblockArticleMutationVariables>;

/**
 * __useAdminUnblockArticleMutation__
 *
 * To run a mutation, you first call `useAdminUnblockArticleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminUnblockArticleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminUnblockArticleMutation, { data, loading, error }] = useAdminUnblockArticleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminUnblockArticleMutation(baseOptions?: Apollo.MutationHookOptions<AdminUnblockArticleMutation, AdminUnblockArticleMutationVariables>) {
        return Apollo.useMutation<AdminUnblockArticleMutation, AdminUnblockArticleMutationVariables>(AdminUnblockArticleDocument, baseOptions);
      }
export type AdminUnblockArticleMutationHookResult = ReturnType<typeof useAdminUnblockArticleMutation>;
export type AdminUnblockArticleMutationResult = Apollo.MutationResult<AdminUnblockArticleMutation>;
export type AdminUnblockArticleMutationOptions = Apollo.BaseMutationOptions<AdminUnblockArticleMutation, AdminUnblockArticleMutationVariables>;
export const AdminArticleConnectionDocument = gql`
    query AdminArticleConnection($after: String) {
  adminArticleConnection(after: $after) {
    nodes {
      uuid
      title
      intro
      price
      revenue
      ordersCount
      commentsCount
      state
      author {
        name
        avatarUrl
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminArticleConnectionQuery__
 *
 * To run a query within a React component, call `useAdminArticleConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminArticleConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminArticleConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>) {
        return Apollo.useQuery<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>(AdminArticleConnectionDocument, baseOptions);
      }
export function useAdminArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>) {
          return Apollo.useLazyQuery<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>(AdminArticleConnectionDocument, baseOptions);
        }
export type AdminArticleConnectionQueryHookResult = ReturnType<typeof useAdminArticleConnectionQuery>;
export type AdminArticleConnectionLazyQueryHookResult = ReturnType<typeof useAdminArticleConnectionLazyQuery>;
export type AdminArticleConnectionQueryResult = Apollo.QueryResult<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>;
export const AdminCommentConnectionDocument = gql`
    query AdminCommentConnection($after: String) {
  adminCommentConnection(after: $after) {
    nodes {
      id
      content
      deletedAt
      author {
        name
        avatarUrl
      }
      commentable {
        title
        uuid
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminCommentConnectionQuery__
 *
 * To run a query within a React component, call `useAdminCommentConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminCommentConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminCommentConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminCommentConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminCommentConnectionQuery, AdminCommentConnectionQueryVariables>) {
        return Apollo.useQuery<AdminCommentConnectionQuery, AdminCommentConnectionQueryVariables>(AdminCommentConnectionDocument, baseOptions);
      }
export function useAdminCommentConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminCommentConnectionQuery, AdminCommentConnectionQueryVariables>) {
          return Apollo.useLazyQuery<AdminCommentConnectionQuery, AdminCommentConnectionQueryVariables>(AdminCommentConnectionDocument, baseOptions);
        }
export type AdminCommentConnectionQueryHookResult = ReturnType<typeof useAdminCommentConnectionQuery>;
export type AdminCommentConnectionLazyQueryHookResult = ReturnType<typeof useAdminCommentConnectionLazyQuery>;
export type AdminCommentConnectionQueryResult = Apollo.QueryResult<AdminCommentConnectionQuery, AdminCommentConnectionQueryVariables>;
export const AdminPaymentConnectionDocument = gql`
    query AdminPaymentConnection($after: String) {
  adminPaymentConnection(after: $after) {
    nodes {
      traceId
      snapshotId
      amount
      state
      assetId
      payer {
        name
        mixinId
        avatarUrl
      }
      order {
        orderType
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminPaymentConnectionQuery__
 *
 * To run a query within a React component, call `useAdminPaymentConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminPaymentConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminPaymentConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminPaymentConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>) {
        return Apollo.useQuery<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>(AdminPaymentConnectionDocument, baseOptions);
      }
export function useAdminPaymentConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>) {
          return Apollo.useLazyQuery<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>(AdminPaymentConnectionDocument, baseOptions);
        }
export type AdminPaymentConnectionQueryHookResult = ReturnType<typeof useAdminPaymentConnectionQuery>;
export type AdminPaymentConnectionLazyQueryHookResult = ReturnType<typeof useAdminPaymentConnectionLazyQuery>;
export type AdminPaymentConnectionQueryResult = Apollo.QueryResult<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>;
export const AdminTransferConnectionDocument = gql`
    query AdminTransferConnection($after: String) {
  adminTransferConnection(after: $after) {
    nodes {
      traceId
      snapshotId
      amount
      memo
      transferType
      assetId
      recipient {
        name
        avatarUrl
        mixinId
      }
      processedAt
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminTransferConnectionQuery__
 *
 * To run a query within a React component, call `useAdminTransferConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminTransferConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminTransferConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminTransferConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>) {
        return Apollo.useQuery<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>(AdminTransferConnectionDocument, baseOptions);
      }
export function useAdminTransferConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>) {
          return Apollo.useLazyQuery<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>(AdminTransferConnectionDocument, baseOptions);
        }
export type AdminTransferConnectionQueryHookResult = ReturnType<typeof useAdminTransferConnectionQuery>;
export type AdminTransferConnectionLazyQueryHookResult = ReturnType<typeof useAdminTransferConnectionLazyQuery>;
export type AdminTransferConnectionQueryResult = Apollo.QueryResult<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>;
export const AdminUserConnectionDocument = gql`
    query AdminUserConnection($after: String) {
  adminUserConnection(after: $after) {
    nodes {
      name
      mixinId
      mixinUuid
      avatarUrl
      articlesCount
      commentsCount
      authorRevenueAmount
      readerRevenueAmount
      paymentsTotal
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminUserConnectionQuery__
 *
 * To run a query within a React component, call `useAdminUserConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminUserConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminUserConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminUserConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>) {
        return Apollo.useQuery<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>(AdminUserConnectionDocument, baseOptions);
      }
export function useAdminUserConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>) {
          return Apollo.useLazyQuery<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>(AdminUserConnectionDocument, baseOptions);
        }
export type AdminUserConnectionQueryHookResult = ReturnType<typeof useAdminUserConnectionQuery>;
export type AdminUserConnectionLazyQueryHookResult = ReturnType<typeof useAdminUserConnectionLazyQuery>;
export type AdminUserConnectionQueryResult = Apollo.QueryResult<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>;
export const CreateArticleDocument = gql`
    mutation CreateArticle($input: CreateArticleMutationInput!) {
  createArticle(input: $input) {
    error
  }
}
    `;
export type CreateArticleMutationFn = Apollo.MutationFunction<CreateArticleMutation, CreateArticleMutationVariables>;

/**
 * __useCreateArticleMutation__
 *
 * To run a mutation, you first call `useCreateArticleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateArticleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createArticleMutation, { data, loading, error }] = useCreateArticleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateArticleMutation(baseOptions?: Apollo.MutationHookOptions<CreateArticleMutation, CreateArticleMutationVariables>) {
        return Apollo.useMutation<CreateArticleMutation, CreateArticleMutationVariables>(CreateArticleDocument, baseOptions);
      }
export type CreateArticleMutationHookResult = ReturnType<typeof useCreateArticleMutation>;
export type CreateArticleMutationResult = Apollo.MutationResult<CreateArticleMutation>;
export type CreateArticleMutationOptions = Apollo.BaseMutationOptions<CreateArticleMutation, CreateArticleMutationVariables>;
export const CreateCommentDocument = gql`
    mutation CreateComment($input: CreateCommentMutationInput!) {
  createComment(input: $input) {
    error
  }
}
    `;
export type CreateCommentMutationFn = Apollo.MutationFunction<CreateCommentMutation, CreateCommentMutationVariables>;

/**
 * __useCreateCommentMutation__
 *
 * To run a mutation, you first call `useCreateCommentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCommentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCommentMutation, { data, loading, error }] = useCreateCommentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateCommentMutation(baseOptions?: Apollo.MutationHookOptions<CreateCommentMutation, CreateCommentMutationVariables>) {
        return Apollo.useMutation<CreateCommentMutation, CreateCommentMutationVariables>(CreateCommentDocument, baseOptions);
      }
export type CreateCommentMutationHookResult = ReturnType<typeof useCreateCommentMutation>;
export type CreateCommentMutationResult = Apollo.MutationResult<CreateCommentMutation>;
export type CreateCommentMutationOptions = Apollo.BaseMutationOptions<CreateCommentMutation, CreateCommentMutationVariables>;
export const HideArticleDocument = gql`
    mutation HideArticle($input: HideArticleMutationInput!) {
  hideArticle(input: $input) {
    error
    success
  }
}
    `;
export type HideArticleMutationFn = Apollo.MutationFunction<HideArticleMutation, HideArticleMutationVariables>;

/**
 * __useHideArticleMutation__
 *
 * To run a mutation, you first call `useHideArticleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useHideArticleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [hideArticleMutation, { data, loading, error }] = useHideArticleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useHideArticleMutation(baseOptions?: Apollo.MutationHookOptions<HideArticleMutation, HideArticleMutationVariables>) {
        return Apollo.useMutation<HideArticleMutation, HideArticleMutationVariables>(HideArticleDocument, baseOptions);
      }
export type HideArticleMutationHookResult = ReturnType<typeof useHideArticleMutation>;
export type HideArticleMutationResult = Apollo.MutationResult<HideArticleMutation>;
export type HideArticleMutationOptions = Apollo.BaseMutationOptions<HideArticleMutation, HideArticleMutationVariables>;
export const PublishArticleDocument = gql`
    mutation PublishArticle($input: PublishArticleMutationInput!) {
  publishArticle(input: $input) {
    error
    success
  }
}
    `;
export type PublishArticleMutationFn = Apollo.MutationFunction<PublishArticleMutation, PublishArticleMutationVariables>;

/**
 * __usePublishArticleMutation__
 *
 * To run a mutation, you first call `usePublishArticleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `usePublishArticleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [publishArticleMutation, { data, loading, error }] = usePublishArticleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function usePublishArticleMutation(baseOptions?: Apollo.MutationHookOptions<PublishArticleMutation, PublishArticleMutationVariables>) {
        return Apollo.useMutation<PublishArticleMutation, PublishArticleMutationVariables>(PublishArticleDocument, baseOptions);
      }
export type PublishArticleMutationHookResult = ReturnType<typeof usePublishArticleMutation>;
export type PublishArticleMutationResult = Apollo.MutationResult<PublishArticleMutation>;
export type PublishArticleMutationOptions = Apollo.BaseMutationOptions<PublishArticleMutation, PublishArticleMutationVariables>;
export const UpdateArticleDocument = gql`
    mutation UpdateArticle($input: UpdateArticleMutationInput!) {
  updateArticle(input: $input) {
    error
  }
}
    `;
export type UpdateArticleMutationFn = Apollo.MutationFunction<UpdateArticleMutation, UpdateArticleMutationVariables>;

/**
 * __useUpdateArticleMutation__
 *
 * To run a mutation, you first call `useUpdateArticleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateArticleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateArticleMutation, { data, loading, error }] = useUpdateArticleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateArticleMutation(baseOptions?: Apollo.MutationHookOptions<UpdateArticleMutation, UpdateArticleMutationVariables>) {
        return Apollo.useMutation<UpdateArticleMutation, UpdateArticleMutationVariables>(UpdateArticleDocument, baseOptions);
      }
export type UpdateArticleMutationHookResult = ReturnType<typeof useUpdateArticleMutation>;
export type UpdateArticleMutationResult = Apollo.MutationResult<UpdateArticleMutation>;
export type UpdateArticleMutationOptions = Apollo.BaseMutationOptions<UpdateArticleMutation, UpdateArticleMutationVariables>;
export const ArticleConnectionDocument = gql`
    query ArticleConnection($order: String!, $after: String) {
  articleConnection(order: $order, after: $after) {
    nodes {
      uuid
      title
      intro
      price
      revenue
      ordersCount
      commentsCount
      author {
        name
        avatarUrl
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useArticleConnectionQuery__
 *
 * To run a query within a React component, call `useArticleConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useArticleConnectionQuery({
 *   variables: {
 *      order: // value for 'order'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useArticleConnectionQuery(baseOptions?: Apollo.QueryHookOptions<ArticleConnectionQuery, ArticleConnectionQueryVariables>) {
        return Apollo.useQuery<ArticleConnectionQuery, ArticleConnectionQueryVariables>(ArticleConnectionDocument, baseOptions);
      }
export function useArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ArticleConnectionQuery, ArticleConnectionQueryVariables>) {
          return Apollo.useLazyQuery<ArticleConnectionQuery, ArticleConnectionQueryVariables>(ArticleConnectionDocument, baseOptions);
        }
export type ArticleConnectionQueryHookResult = ReturnType<typeof useArticleConnectionQuery>;
export type ArticleConnectionLazyQueryHookResult = ReturnType<typeof useArticleConnectionLazyQuery>;
export type ArticleConnectionQueryResult = Apollo.QueryResult<ArticleConnectionQuery, ArticleConnectionQueryVariables>;
export const ArticleDocument = gql`
    query Article($uuid: ID!, $readerAfter: String) {
  article(uuid: $uuid) {
    id
    uuid
    title
    intro
    content
    price
    assetId
    authorized
    ordersCount
    commentsCount
    myShare
    revenue
    author {
      name
      avatarUrl
      mixinId
    }
    readers(after: $readerAfter, first: 10) {
      nodes {
        name
        avatarUrl
        mixinId
      }
      totalCount
      pageInfo {
        hasNextPage
        endCursor
      }
    }
    createdAt
  }
}
    `;

/**
 * __useArticleQuery__
 *
 * To run a query within a React component, call `useArticleQuery` and pass it any options that fit your needs.
 * When your component renders, `useArticleQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useArticleQuery({
 *   variables: {
 *      uuid: // value for 'uuid'
 *      readerAfter: // value for 'readerAfter'
 *   },
 * });
 */
export function useArticleQuery(baseOptions?: Apollo.QueryHookOptions<ArticleQuery, ArticleQueryVariables>) {
        return Apollo.useQuery<ArticleQuery, ArticleQueryVariables>(ArticleDocument, baseOptions);
      }
export function useArticleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ArticleQuery, ArticleQueryVariables>) {
          return Apollo.useLazyQuery<ArticleQuery, ArticleQueryVariables>(ArticleDocument, baseOptions);
        }
export type ArticleQueryHookResult = ReturnType<typeof useArticleQuery>;
export type ArticleLazyQueryHookResult = ReturnType<typeof useArticleLazyQuery>;
export type ArticleQueryResult = Apollo.QueryResult<ArticleQuery, ArticleQueryVariables>;
export const CommentConnectionDocument = gql`
    query CommentConnection($commentableType: String, $commentableId: Int, $after: String) {
  commentConnection(
    commentableType: $commentableType
    commentableId: $commentableId
    after: $after
  ) {
    nodes {
      content
      deletedAt
      author {
        name
        avatarUrl
        mixinId
        createdAt
      }
      commentable {
        uuid
        title
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useCommentConnectionQuery__
 *
 * To run a query within a React component, call `useCommentConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useCommentConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCommentConnectionQuery({
 *   variables: {
 *      commentableType: // value for 'commentableType'
 *      commentableId: // value for 'commentableId'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useCommentConnectionQuery(baseOptions?: Apollo.QueryHookOptions<CommentConnectionQuery, CommentConnectionQueryVariables>) {
        return Apollo.useQuery<CommentConnectionQuery, CommentConnectionQueryVariables>(CommentConnectionDocument, baseOptions);
      }
export function useCommentConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CommentConnectionQuery, CommentConnectionQueryVariables>) {
          return Apollo.useLazyQuery<CommentConnectionQuery, CommentConnectionQueryVariables>(CommentConnectionDocument, baseOptions);
        }
export type CommentConnectionQueryHookResult = ReturnType<typeof useCommentConnectionQuery>;
export type CommentConnectionLazyQueryHookResult = ReturnType<typeof useCommentConnectionLazyQuery>;
export type CommentConnectionQueryResult = Apollo.QueryResult<CommentConnectionQuery, CommentConnectionQueryVariables>;
export const MyArticleConnectionDocument = gql`
    query MyArticleConnection($type: String!, $after: String) {
  myArticleConnection(type: $type, after: $after) {
    nodes {
      uuid
      title
      intro
      price
      revenue
      ordersCount
      state
      author {
        name
        avatarUrl
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useMyArticleConnectionQuery__
 *
 * To run a query within a React component, call `useMyArticleConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyArticleConnectionQuery({
 *   variables: {
 *      type: // value for 'type'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useMyArticleConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>) {
        return Apollo.useQuery<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>(MyArticleConnectionDocument, baseOptions);
      }
export function useMyArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>) {
          return Apollo.useLazyQuery<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>(MyArticleConnectionDocument, baseOptions);
        }
export type MyArticleConnectionQueryHookResult = ReturnType<typeof useMyArticleConnectionQuery>;
export type MyArticleConnectionLazyQueryHookResult = ReturnType<typeof useMyArticleConnectionLazyQuery>;
export type MyArticleConnectionQueryResult = Apollo.QueryResult<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>;
export const MyPaymentConnectionDocument = gql`
    query MyPaymentConnection($after: String) {
  myPaymentConnection(after: $after) {
    nodes {
      traceId
      snapshotId
      amount
      assetId
      state
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useMyPaymentConnectionQuery__
 *
 * To run a query within a React component, call `useMyPaymentConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyPaymentConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyPaymentConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useMyPaymentConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>) {
        return Apollo.useQuery<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>(MyPaymentConnectionDocument, baseOptions);
      }
export function useMyPaymentConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>) {
          return Apollo.useLazyQuery<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>(MyPaymentConnectionDocument, baseOptions);
        }
export type MyPaymentConnectionQueryHookResult = ReturnType<typeof useMyPaymentConnectionQuery>;
export type MyPaymentConnectionLazyQueryHookResult = ReturnType<typeof useMyPaymentConnectionLazyQuery>;
export type MyPaymentConnectionQueryResult = Apollo.QueryResult<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>;
export const MyTransferConnectionDocument = gql`
    query MyTransferConnection($after: String) {
  myTransferConnection(after: $after) {
    nodes {
      traceId
      snapshotId
      amount
      assetId
      transferType
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useMyTransferConnectionQuery__
 *
 * To run a query within a React component, call `useMyTransferConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyTransferConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyTransferConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useMyTransferConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>) {
        return Apollo.useQuery<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>(MyTransferConnectionDocument, baseOptions);
      }
export function useMyTransferConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>) {
          return Apollo.useLazyQuery<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>(MyTransferConnectionDocument, baseOptions);
        }
export type MyTransferConnectionQueryHookResult = ReturnType<typeof useMyTransferConnectionQuery>;
export type MyTransferConnectionLazyQueryHookResult = ReturnType<typeof useMyTransferConnectionLazyQuery>;
export type MyTransferConnectionQueryResult = Apollo.QueryResult<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>;
export const StatisticsDocument = gql`
    query Statistics {
  statistics {
    usersCount
    articlesCount
    authorRevenueAmount
    readerRevenueAmount
  }
}
    `;

/**
 * __useStatisticsQuery__
 *
 * To run a query within a React component, call `useStatisticsQuery` and pass it any options that fit your needs.
 * When your component renders, `useStatisticsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useStatisticsQuery({
 *   variables: {
 *   },
 * });
 */
export function useStatisticsQuery(baseOptions?: Apollo.QueryHookOptions<StatisticsQuery, StatisticsQueryVariables>) {
        return Apollo.useQuery<StatisticsQuery, StatisticsQueryVariables>(StatisticsDocument, baseOptions);
      }
export function useStatisticsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<StatisticsQuery, StatisticsQueryVariables>) {
          return Apollo.useLazyQuery<StatisticsQuery, StatisticsQueryVariables>(StatisticsDocument, baseOptions);
        }
export type StatisticsQueryHookResult = ReturnType<typeof useStatisticsQuery>;
export type StatisticsLazyQueryHookResult = ReturnType<typeof useStatisticsLazyQuery>;
export type StatisticsQueryResult = Apollo.QueryResult<StatisticsQuery, StatisticsQueryVariables>;
export const TransferConnectionDocument = gql`
    query TransferConnection($after: String) {
  transferConnection(after: $after) {
    nodes {
      traceId
      snapshotId
      amount
      assetId
      transferType
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useTransferConnectionQuery__
 *
 * To run a query within a React component, call `useTransferConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useTransferConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTransferConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useTransferConnectionQuery(baseOptions?: Apollo.QueryHookOptions<TransferConnectionQuery, TransferConnectionQueryVariables>) {
        return Apollo.useQuery<TransferConnectionQuery, TransferConnectionQueryVariables>(TransferConnectionDocument, baseOptions);
      }
export function useTransferConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TransferConnectionQuery, TransferConnectionQueryVariables>) {
          return Apollo.useLazyQuery<TransferConnectionQuery, TransferConnectionQueryVariables>(TransferConnectionDocument, baseOptions);
        }
export type TransferConnectionQueryHookResult = ReturnType<typeof useTransferConnectionQuery>;
export type TransferConnectionLazyQueryHookResult = ReturnType<typeof useTransferConnectionLazyQuery>;
export type TransferConnectionQueryResult = Apollo.QueryResult<TransferConnectionQuery, TransferConnectionQueryVariables>;